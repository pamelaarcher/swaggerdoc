
window.onload = function() {
  // Build a system
  var url = window.location.search.match(/url=([^&]+)/);
  if (url && url.length > 1) {
    url = decodeURIComponent(url[1]);
  } else {
    url = window.location.origin;
  }
  var options = {
  "swaggerDoc": {
    "swagger": "2.0",
    "info": {
      "version": "1.0.0",
      "title": "My Restaurant Project CRUD",
      "description": "My User Project Application API",
      "license": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "host": "localhost:4000",
    "basePath": "/",
    "tags": [
      {
        "name": "Restaurants",
        "description": "API for users in the system"
      }
    ],
    "schemes": [
      "http"
    ],
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "paths": {
      "/restaurants": {
        "get": {
          "tags": [
            "Restaurants"
          ],
          "summary": "Get all Restaurants in system",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Restaurant"
              }
            }
          }
        }
      },
      "/restaurant": {
        "post": {
          "tags": [
            "Restaurants"
          ],
          "description": "Create new restaurant in system",
          "parameters": [
            {
              "name": "restaurant",
              "in": "body",
              "description": "Restaurant that we want to create",
              "schema": {
                "$ref": "#/definitions/Restaurant"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "New restaurant is created",
              "schema": {
                "$ref": "#/definitions/Restaurant"
              }
            }
          }
        }
      },
      "/restaurant/{id}": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of restaurant that we want to update or delete",
            "type": "integer"
          }
        ],
        "delete": {
          "tags": [
            "Restaurants"
          ],
          "summary": "Delete Restaurant",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Restaurant"
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Restaurants"
          ],
          "summary": "Update Restaurant",
          "parameters": [
            {
              "name": "name",
              "in": "body",
              "description": "Restaurant that we want to update",
              "schema": {
                "$ref": "#/definitions/Restaurant"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Restaurant updated",
              "schema": {
                "$ref": "#/definitions/Restaurant"
              }
            },
            "404": {
              "description": "Restaurant not found",
              "schema": {
                "$ref": "#/definitions/Restaurant"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "Restaurant": {
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "uniqueItems": true
          },
          "name": {
            "type": "string"
          }
        }
      }
    }
  },
  "customOptions": {}
};
  url = options.swaggerUrl || url
  var urls = options.swaggerUrls
  var customOptions = options.customOptions
  var spec1 = options.swaggerDoc
  var swaggerOptions = {
    spec: spec1,
    url: url,
    urls: urls,
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout"
  }
  for (var attrname in customOptions) {
    swaggerOptions[attrname] = customOptions[attrname];
  }
  var ui = SwaggerUIBundle(swaggerOptions)

  if (customOptions.oauth) {
    ui.initOAuth(customOptions.oauth)
  }

  if (customOptions.authAction) {
    ui.authActions.authorize(customOptions.authAction)
  }

  window.ui = ui
}
